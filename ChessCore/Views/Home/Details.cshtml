@using Newtonsoft.Json;
@model ChessCore.Models.DetailsViewModel
@*<p>@Model.DateTimeNow </p>*@


<script src="~/js/html2canvas.min.js">
</script>
<script type="text/javascript">


    // Pour obtenir la valeur
    //var maValeur = sessionStorage.getItem('maVariable');

    // alert(maValeur);
    //var winnerColor = @Model.StringWinnerColor;
    if (!typeof '@Model.StringWinnerColor' === "string" && !'@Model.StringWinnerColor'.length === 0) {
        alert('@Model.StringWinnerColor');
    }

    var initialSeconde = @Model.InitialDuration;
    //alert(initialSeconde);
    var isComputerTurn = @Model.GetIsComputerTurn();
    var isFullCPU = @Model.IsFullCPU;

    //alert(isFullCPU);

    //pour les timers des joeurs

    //alert(sessionStorage.getItem('startTimeWhite'));

    var blackTimeLabel = document.getElementById("blackTimeLabel");
    var whiteTimeLabel = document.getElementById("whiteTimeLabel");

    var currentColor = '@Model.CurrentTurn';
    var computerColor = '@Model.ComputerColor';

    var levelDetails = document.getElementById("levelDetails");
    var maxReflectionTimeInMinuteDetails = document.getElementById("MaxReflectionTimeInMinuteDetails");

    levelDetails.disabled = false;
    maxReflectionTimeInMinuteDetails.disabled = false;
    if (currentColor == computerColor) {
        levelDetails.disabled = true;
        maxReflectionTimeInMinuteDetails.disabled = true;
    }


    document.getElementById('whiteTimeLabel').textContent = formatTime((totalSecondsWhite));
    document.getElementById('blackTimeLabel').textContent = formatTime((totalSecondsBlack));
    document.getElementById('clock').textContent = formatTime((totalSecondsReflection));



    function pad(val) {
        var valString = val + "";
        if (valString.length < 2) {
            return "0" + valString;
        } else {
            return valString;
        }
    }



    $(function () {
        if (typeof '@Model.StringWinnerColor' === "string" && '@Model.StringWinnerColor'.length === 0) {
            setInterval(BindPartialView, 1000);
            //setInterval(timerCount, 50);
        }
    });



    function BindPartialView() {
        var objDiv = document.getElementById("history_div");
        objDiv.scrollTop = objDiv.scrollHeight;

        //alert(isFullCPU);
        var data = {};
        var urlValue = "/Home/DetailsTimer";
        if (isFullCPU == "1")
            urlValue = "/Home/DetailsTimerFULLCPU";
        if (isComputerTurn == "1") {
            //alert(isComputerTurn);
            isComputerTurn = "0";
            $.ajax({
                type: "POST",
                url: urlValue, //DetailsTimer pour le mode normal
                data: data,
                contentType: 'application/x-www-form-urlencoded',
                dataType: "html",
                success: function (response) {
                    $('#dvPartial').html(response);
                },
                failure: function (response) {
                    // alert(response.responseText);
                    if (isFullCPU == "1")
                        isComputerTurn = "1";//Mode FULL CPU à commenter si mode normal
                },
                error: function (response) {
                    //  alert(response.responseText);
                }
            });
        }

    }

    function DivClicked(index) {
        document.getElementById(index).style.backgroundColor = 'yellow';
        document.getElementById(index);
        var selectedLevel = $('#levelDetails').val();
        var SelectedReflectionTimeInMinute = $('#MaxReflectionTimeInMinuteDetails').val();


        var data = { objId: index, selectedLevel: selectedLevel, SelectedReflectionTimeInMinute: SelectedReflectionTimeInMinute };
        $.ajax({
            type: "POST",
            url: "/Home/Details",
            data: data,
            contentType: 'application/x-www-form-urlencoded',
            dataType: "html",
            success: function (response) {
                $('#dvPartial').html(response);
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    };

    function Print() {


        //html2canvas(document.body).then(function (canvas) {
        //  document.body.appendChild(canvas);
        //});
        html2canvas(document.body, { background: '#fff' }).then(function (canvas) {

            //document.body.appendChild(canvas);

            // Get base64URL
            var base64URL = canvas.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');
            var casesJSON = JSON.stringify(@Html.Raw(JsonConvert.SerializeObject(Model.Cases)));


            // alert(base64URL);
            // AJAX request
            $.ajax({
                url: '/Home/SavePrintScreen',
                type: 'post',
                data: { image: base64URL, cases: casesJSON },
                success: function (data) {

                    window.location.href = '@Url.Action("SaveBoard", "Home")';
                    console.log('Upload successfully');
                }
            });
        });



    }



</script>
<h5 class="d-inline-block inline">
    @* <span class="informationFont">Current turn :</span> *@

    @if (@Model.CurrentTurn == "W" && Model.ComputerColor != "W")
    {
        @* <span class="whiteFont">👤</span> *@
        <i class="fa-solid fa-user" title="Current turn Player 👤" style="color: white;"></i>  <!-- Icône blanche -->
    }
    else if (@Model.CurrentTurn == "W" && Model.ComputerColor == "W")
    {
        <i class="fa-solid fa-robot" title="Current turn 🤖" style=" color: white;"></i>
       
    }
    else if (@Model.CurrentTurn == "B" && Model.ComputerColor != "B")
    {
        <i class="fa-solid fa-user" title="Current turn Player 👤" style="color: black;"></i>
    }
    else
    {
        <i class="fa-solid fa-robot" title="Current turn IA 🤖"  style="color: black;"></i>
    }
    @* <span class="informationFont">Computer color :</span> *@
   @*  @if (@Model.ComputerColor == "W")
    {
       
        <i class="fa-solid fa-robot" style="color: white;"></i>
    }
    else
    {
       
        <i class="fa-solid fa-robot" style="color: black;"></i>
    } *@
    <label id="times"> |🕒 </label>
    <label id="whiteTimeLabel" class="whiteFont"></label>
    <label id="blackTimeLabel" class="blackFont"></label>
    <label> | </label>
    @*  <button class="fa fa-camera" onclick="Print();">
    print/save
    </button> *@
    @* GET MEMERY USAGE *@
    @* <b style='color:red;'>@Model.GetMemoryUsed() </b> *@
    <b style='color:white;'>@Model.StringWhiteCPULevel </b>
    <b style='color:black;'>@Model.StringBlackCPULevel </b>
</h5>


<br />



@*<a href="@Url.Action("Home", "SaveHistory")" />*@
@* @Html.ActionLink("print", "SaveHistory")*@
@* <i class="fa fa-save"></i>*@
<hr />


@*<button onclick="RunEngine()">run engine</button>*@

<div class="d-flex">


    <div class="d-inline-block">
        <div class="d-inline-block">
            <label for="level" title="Computer level">L :</label>
            <select id="levelDetails" name="SelectedLevel" title="Computer level">
                @foreach (var level in Model.Levels)
                {
                    <option value="@level" selected="@(level == Model.SelectedLevel ? "selected" : null)">
                        @level
                    </option>
                }
            </select>

            <label for="MaxReflectionTimeInMinute" title="IA maximum reflection time in minute">⏳:</label>
            <select id="MaxReflectionTimeInMinuteDetails" name="MaxReflectionTimeInMinute" title="IA maximum reflection time in minute">
                @foreach (var reflectionTimeInMinute in Model.ReflectionTimesInMinute)
                {
                    <option value="@reflectionTimeInMinute" selected="@(reflectionTimeInMinute == Model.SelectedReflectionTimeInMinute ? "selected" : null)">
                        @reflectionTimeInMinute
                    </option>
                }
            </select>
            <div class="d-inline-block" title="Current turn reflection time">
                @if (@Model.CurrentTurn == "W")
                {
                    <div id="clock" class="whiteFont">00:00</div>
                }
                else
                {
                    <div id="clock" class="blackFont">00:00</div>
                }
            </div>





        </div>
        @if (@Model.MovingList != null)
        {
            <p title="Turn number">🔄 : @Model.MovingList.Count</p>
        }

        <div id="history_div" style="width: 150px; height: 575px; overflow-y: scroll;">
            @if (Model.MovingList != null)
            {
                foreach (var line in Model.MovingList)
                {
                    @ChessCore.Tools.Utils.LineToSymbol(line)
                    <br />
                }
            }
        </div>

        <a href="@Url.Action("Preview", "Home")">
            <button type="button">
                @*<i class="bi bi-camera"></i>*@
                Preview
            </button>
        </a>
        @*   <a href="@Url.Action("SaveHistory", "Home")">
        <button type="button">

        save
        </button>
        </a> *@

        <button class="fa fa-camera" onclick="Print();">
            print/save
        </button>
    </div>

    <div class="d-inline-block" style="margin-top: 43px;">
        @{
            if (Model.RevertWrapperClass == "revertWrapper")
            {
                string[] coordYArray = { "1", "2", "3", "4", "5", "6", "7", "8" };

                foreach (var coordY in coordYArray)
                {
                    <div style="height:70px; background-color: #04AA6D;">
                        <label style="font-weight: bold; margin-top: 25px"> @coordY &nbsp;</label>
                    </div>

                }
            }
            else
            {
                string[] coordYArray = { "8", "7", "6", "5", "4", "3", "2", "1" };

                foreach (var coordY in coordYArray)
                {
                    <div style="height:70px; background-color: #04AA6D;">
                        <label class="@Model.RevertWrapperClass" style="font-weight: bold; margin-top: 25px"> @coordY &nbsp</label>
                    </div>

                }
            }

        }
    </div>
    <div class="d-inline-block" style="width: 500px;">

        <div class="wrapper @Model.RevertWrapperClass">

            <div class="top">

                <div class="wrapper-inner">
                    <div align="left">
                        <label style="color:black;font-size:25px;" class="@Model.RevertWrapperClass">@Model.GetBlackScoreString() </label>
                    </div>

                    <div align="right">

                        @if (Model.HuntingBoardWhiteImageList != null)
                        {
                            foreach (var imageSrc in Model.HuntingBoardWhiteImageList)
                            {
                                <img src=@imageSrc width="25" height="25"
                                     class="@Model.RevertWrapperClass" />

                            }
                        }

                    </div>

                </div>
            </div>

            @try
            {
                for (int i = 0; i < 8; i++)
                {

                    for (int j = 0; j < 8; j++)
                    {

                        <div id="@Model.GetPawn(j + (8 * i)).Index"
                             class="box"
                             onclick="DivClicked(@Model.GetPawn(j + (8 * i)).Index); return true;">
                            @* <p>@Model.GetPawn(j + (8 * i)).Index</p>*@


                            @if (@Model.GetPawn(j + (8 * i)).ImageIsExist)
                            {
                                <img src=@Model.GetPawn(j + (8 * i)).PawnImageSrc width="50" height="50"
                                     class="@Model.GetPawn(j + (8 * i)).SelectedClass @Model.RevertWrapperClass" />
                            }
                            else
                            {
                                <img src="" width="5" height="5"
                                     class="@Model.GetPawn(j + (8 * i)).SelectedClass @Model.RevertWrapperClass" />
                            }
                            @*<img src="~/Images/BishopBlack.png" width="50" height="50" />*@
                            <div class="caseNumber" style=" font-size: 10px;">
                                <p class="@Model.RevertWrapperClass">
                                    @(
                                        j + (i * 8)
                                        )
                                </p>
                            </div>


                        </div>

                    }
                }
            }
            catch (Exception ex)
            {
                <H1>
                    '@Model.StringWinnerColor';
                </H1>

            }

            <div class="bottom">
                <div>
                    @{
                        string[] coordXArray = { "A", "B", "C", "D", "E", "F", "G", "H" };

                        foreach (var coordX in coordXArray)
                        {
                            <label class="@Model.RevertWrapperClass" style="width: 66px; font-weight: bold;">&nbsp; &nbsp; &nbsp; @coordX</label>
                        }

                        <div class="wrapper-inner">
                            <div align="left">
                                <label style="color:white;font-size:25px;" class="@Model.RevertWrapperClass">@Model.GetWhiteScoreString() </label>
                            </div>

                            <div align="right">
                                @if (Model.HuntingBoardBlackImageList != null)
                                {
                                    foreach (var imageSrc in Model.HuntingBoardBlackImageList)
                                    {
                                        <img src=@imageSrc width="25" height="25"
                                             class="@Model.RevertWrapperClass" />

                                    }
                                }
                            </div>


                        </div>

                    }
                </div>
            </div>


        </div>
    </div>




    <br />

